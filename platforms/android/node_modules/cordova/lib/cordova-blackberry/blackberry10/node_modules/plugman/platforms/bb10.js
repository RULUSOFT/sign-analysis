/*
 *
 * Copyright 2013 Anis Kadri
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *
*/

var fs = require('fs'),  // use existsSync in 0.6.x
    path = require('path'),
    shell = require('shelljs'),
    et = require('elementtree'),
    getConfigChanges = require('../util/config-changes'),
    sourceDir = 'src',
    xml_helpers = require(path.join(__dirname, '..', 'util', 'xml-helpers'));


exports.handlePlugin = function (action, project_dir, plugin_dir, plugin_et) {
    var plugin_id = plugin_et._root.attrib.id,
        version = plugin_et._root.attrib.version,
        external_hosts = [],
        assets = plugin_et.findall('./asset'),
        jsModules = plugin_et.findall('./js-module'),
        modulesList = [],
        pluginClobbers = {};

    // collision detection
    if(action == "install" && pluginInstalled(plugin_et, project_dir)) {
        throw "Plugin "+plugin_id+" already installed";
    } else if(action == "uninstall" && !pluginInstalled(plugin_et, project_dir)) {
        throw "Plugin "+plugin_id+" not installed";
    }

    //create project_dir/plugins directory and copy plugin src
    shell.mkdir("-p", path.join(project_dir, "plugins", plugin_id));
    shell.cp("-R", path.join(plugin_dir, "src", "blackberry10", "*"), path.join(project_dir, "plugins", plugin_id));
    shell.cp("-R", path.join(plugin_dir, "plugin.xml"), path.join(project_dir, "plugins", plugin_id));

    //create directory for this plugin
    shell.mkdir("-p", project_dir + "/www/plugins/" + plugin_id);

    // move asset files
    assets.forEach(function (asset) {
        var srcPath = path.resolve(plugin_dir, asset.attrib.src),
            targetPath = path.resolve(project_dir, asset.attrib.target);
        if (action == 'install') {
            shell.cp(srcPath, targetPath);
        }
    });

    //copy js modules to project_dir/www/plugin, wrap in cordova.define
    jsModules.forEach(function (jsModule) {
        if (action === "install") {
            var src = path.join(plugin_dir, jsModule.attrib.src),
                filename = src.substring(src.lastIndexOf("/") + 1, src.length),
                moduleName = jsModule.attrib.name,
                clobbers = jsModule.findall("./clobbers"),
                fileContents;
            modulesList.push(filename);
            moduleName = typeof moduleName !== "undefined" ? moduleName : filename.slice(0, -3);
            shell.cp(src, path.join(project_dir, "www", "plugins", plugin_id));
            fileContents = fs.readFileSync(path.join(project_dir, "www", "plugins", plugin_id, filename), "utf-8"),
            fs.writeFileSync(path.join(project_dir, "www", "plugins",  plugin_id, filename), wrapCordovaDefine(fileContents, plugin_id + "." + moduleName), "utf-8");
            clobbers.forEach(function (clobber) {
                var target = clobber.attrib.target.split(".");
                pluginClobbers = clobberJS(target, {}, plugin_id + "." + moduleName);
            });
        }
    });
    writeJSONFile(path.join(project_dir, "www", "plugins", "plugins.json"), plugin_id, modulesList, pluginClobbers);
};

function pluginInstalled(plugin_et, project_dir) {
    return fs.existsSync(path.join(project_dir, "plugins", plugin_et._root.attrib.id));
}

function wrapCordovaDefine(fileContents, name) {
    return ("cordova.define('" +  name + "', function (require, exports, module) {\n" + fileContents + "\n});\n");
}

function clobberJS(target, obj, clobberName) {
    var segment,
        partial;
    if (target.length === 1) {
        obj[target[0]] = {};
        obj[target[0]].path = clobberName;
        return obj;
    } else {
        segment = target.shift();
        partial = {};
        partial[segment] = {};
        partial[segment].children = clobberJS(target, obj, clobberName);
        return partial;
    }
}

function writeJSONFile(filePath, pluginId, modules, clobbers) {
    var pluginsJSON = {};
    if (fs.existsSync(filePath)) {
        pluginsJSON = require(filePath);
    }
    pluginsJSON[pluginId] = {
        "modules": modules,
        "clobbers": clobbers
    };
    fs.writeFileSync(filePath, JSON.stringify(pluginsJSON, null, 4) + "\n", "utf-8");
}

